package model.player;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;

import model.cards.OriginCards.Believer;
import model.cards.OriginCards.SpiritGuide;
import model.exception.ObservateurNotLinkedException;
import view.Observateur;
import view.ObservateurJoueurReel;

public class ObserverHuman {
	
	private ObservateurJoueurReel observateur;
	
	public void attacher(ObservateurJoueurReel o){
		observateur = o;
	}
	
	public void detacher(ObservateurJoueurReel o){
		observateur = null;
	}
	
	public Player notifySelectPlayer() throws ObservateurNotLinkedException{
		if (observateur == null){
			throw new ObservateurNotLinkedException("un observateur n'est pas lié à un joueur humain");
		}
		return observateur.selectTarget();
	}
	
	public void notifyStartTour() throws ObservateurNotLinkedException{
		if (observateur == null){
			throw new ObservateurNotLinkedException("un observateur n'est pas lié à un joueur humain");
		}
		observateur.startTourJoueur();
	}
	
	public List<Believer> notifySelectCroyant(SpiritGuide guideSpirituel){
		if (observateur == null){
			throw new ObservateurNotLinkedException("un observateur n'est pas lié à un joueur humain");
		}
		ArrayList<Believer> listeCroyants = new ArrayList<Believer>();
		
		
		return listeCroyants;
	}
	
	
	
//	public void notifier(){
//		Iterator<Observateur> itObservateur = listeObservateur.iterator();
//		Observateur o;
//		while(itObservateur.hasNext()){
//			o = itObservateur.next();
//			o.update();
//		}
//	}
}
