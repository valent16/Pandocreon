package game;

import java.util.Collections;
import java.util.LinkedList;

import cards.ActionCard;
import cards.Card;
import cards.Divinity;
import player.Player;

public class GameManager {
	private static volatile GameManager managerUnique;
	
	private LinkedList<Card> pioche = new LinkedList<Card>();
	
	private LinkedList<Card> defausse = new LinkedList<Card>();
	
	private LinkedList<ActionCard> croyants = new LinkedList<ActionCard>();
	
	private LinkedList<Divinity> divinites = new LinkedList<Divinity>();
	
	private LinkedList<Player> players = new LinkedList<Player>();
	
	private Player joueurDebutTour;
	
	private Player joueurActif;
	
	/**
	 * Constructeur privé du singleton GameManager
	 */
	private GameManager(){
		
	}
	
	public static GameManager getInstanceUniqueManager(){
		if (managerUnique == null){
			synchronized (GameManager.class){ //pour gerer le multi-thread
				if (managerUnique == null){
					managerUnique= new GameManager();
				}
			}
		}
		return managerUnique;
	}
	
	/**
	 * méthode permettant de mélanger les cartes du jeu
	 */
	public void melangerCartes(){
		Collections.shuffle(pioche);
		Collections.shuffle(defausse);
	}
	
	/**
	 * Permet d'ajouter un joueur au gestionnaire de partie
	 */
	public void ajouterJoueur(Player joueur){
		players.add(joueur);
	}
	

	/**
	 * Permet d'éliminer un joueur de la partie
	 * @param joueur
	 */
	public void eliminerJoueur(Player joueur){
		players.remove(joueur);
	}
	
	/**
	 * Permet d'initialiser la partie de jeu
	 * @param cartesAction
	 * @param divinites
	 */
	public void initialisationPartie(LinkedList<ActionCard> cartesAction, LinkedList<Divinity> divinites ){
		
	}
	

}
